import numpy as np
from scipy.linalg import eig
import pytest
from liteczos.lanczos import get_ground_state, get_green_function
from liteczos import twosites
from test_twosites import t, U

## random matrices for tests
H2x2 = np.array(
    [[-0.09632342, -0.93660398],
     [-0.93660398,  3.73596509]]
)

H16x16 = np.array([
    [-1.3894775 , -1.19471433,  1.99407897,  0.53557267,  0.98367845, -2.62844458,  2.65080982,  0.22244433,  0.14959715, -2.29061152,  0.86372551,  0.82224996,  0.07320181,  1.31539523, -1.95830912, -2.15485695],
    [-1.19471433, -2.68368066,  0.0852226 ,  1.41320504,  0.06444657, -0.18960983,  0.08429615, -1.09926197,  5.14483982,  0.14301783, -0.90158212,  1.56784986, -1.86241333,  0.57249503,  0.7829665 ,  1.58008006],
    [ 1.99407897,  0.0852226 , -0.50927102,  0.55631392, -1.23903411, -0.87228578,  0.79384514,  0.93244528,  1.33337573,  2.28672222, -0.18226244, -0.07155498,  0.4113107 ,  0.73447906, -0.70517091, -0.40891196],
    [ 0.53557267,  1.41320504,  0.55631392, -0.10172151, -0.17638679,  0.41287391,  1.39290493,  1.19163304,  0.36580959,  0.63365789, -1.63639204, -0.33545538,  0.45951687, -0.13576851,  1.08469677,  0.09134119],
    [ 0.98367845,  0.06444657, -1.23903411, -0.17638679,  0.00968128,  0.28990885, -0.60511178, -2.03179533,  0.06201872,  1.62649369,  0.23846945,  0.76231128,  0.11340809, -0.59023789, -1.03949915,  2.81217775],
    [-2.62844458, -0.18960983, -0.87228578,  0.41287391,  0.28990885,  0.01872778, -0.14330319, -1.10985308,  1.51652613, -1.09744804, -2.23861154, -0.38894472,  0.45649626, -0.67962861,  0.10732095,  0.30315493],
    [ 2.65080982,  0.08429615,  0.79384514,  1.39290493, -0.60511178, -0.14330319,  1.71566467, -1.91221384, -0.84326608,  0.642176  ,  0.87809697, -2.53951658, -1.10359337, -3.01413424,  0.7368459 ,  1.30594053],
    [ 0.22244433, -1.09926197,  0.93244528,  1.19163304, -2.03179533, -1.10985308, -1.91221384,  0.7469862 , -0.60420186, -1.10956784,  2.37829008, -1.87088819, -2.37262601,  0.4999433 , -0.94401464, -1.59147909],
    [ 0.14959715,  5.14483982,  1.33337573,  0.36580959,  0.06201872,  1.51652613, -0.84326608, -0.60420186, -1.86867343, -0.37991516,  0.2584006 , -0.3061907 ,  0.70638223, -0.92513681, -0.05013312,  0.19704743],
    [-2.29061152,  0.14301783,  2.28672222,  0.63365789,  1.62649369, -1.09744804,  0.642176  , -1.10956784, -0.37991516,  3.1565117 , -0.83614982,  0.70247089, -1.14442043,  0.23415335, -0.12457932, -0.64377993],
    [ 0.86372551, -0.90158212, -0.18226244, -1.63639204,  0.23846945, -2.23861154,  0.87809697,  2.37829008,  0.2584006 , -0.83614982,  0.85743391,  1.41521316, -0.61592657, -0.65628391,  2.22066177,  1.61143456],
    [ 0.82224996,  1.56784986, -0.07155498, -0.33545538,  0.76231128, -0.38894472, -2.53951658, -1.87088819, -0.3061907 ,  0.70247089,  1.41521316,  1.56307283, -0.92916244,  1.09855887,  0.72119621, -1.48487055],
    [ 0.07320181, -1.86241333,  0.4113107 ,  0.45951687,  0.11340809,  0.45649626, -1.10359337, -2.37262601,  0.70638223, -1.14442043, -0.61592657, -0.92916244, -1.46619797, -2.08704258, -1.88786783,  1.44579798],
    [ 1.31539523,  0.57249503,  0.73447906, -0.13576851, -0.59023789, -0.67962861, -3.01413424,  0.4999433 , -0.92513681,  0.23415335, -0.65628391,  1.09855887, -2.08704258, -2.68213308, -3.31234123, -2.06423957],
    [-1.95830912,  0.7829665 , -0.70517091,  1.08469677, -1.03949915,  0.10732095,  0.7368459 , -0.94401464, -0.05013312, -0.12457932,  2.22066177,  0.72119621, -1.88786783, -3.31234123, -2.18500085, -0.16603588],
    [-2.15485695,  1.58008006, -0.40891196,  0.09134119,  2.81217775,  0.30315493,  1.30594053, -1.59147909,  0.19704743, -0.64377993,  1.61143456, -1.48487055,  1.44579798, -2.06423957, -0.16603588, -2.94753416]
])


@pytest.fixture(
    name="H",
    params=[H2x2, H16x16],
    ids=["2x2", "16x16"]
)
def H(request):
    
    return request.param


@pytest.fixture(
    name="omega",
    params=[0, np.linspace(0, .1, 4)],
    ids=["1_w", "n_w"]
)
def omega(request):
    return request.param


@pytest.fixture(
    name="eta",
    params=[.1, np.linspace(.1, .3, 4)],
    ids=["1_eta", "n_eta"]
)
def eta(request):
    return request.param


@pytest.fixture(
    name="mu",
    params=[0, np.linspace(0, .1, 4)],
    ids=["1_mu", "n_mu"]
)
def mu(request):
    return request.param


def test_ground_state_energy(H):
    eigvals, _ = eig(H)
    expected_e0 = eigvals.min() 
    e0, _ = get_ground_state(H)    
    assert np.allclose(e0, expected_e0)


def test_ground_state_vector(H):
    eigvals, eigvecs = eig(H)
    expected_v0 = eigvecs[:, eigvals.argmin()]
    _, v0 = get_ground_state(H)    
    assert np.allclose(v0, expected_v0) or np.allclose(v0, -expected_v0)


def test_ground_state_twosites(t, U):
    H = twosites.hamiltonian(t, U)
    expected_e0 = twosites.ground_state_energy(t, U)
    e0, v0 = get_ground_state(H)
    assert np.allclose(e0, expected_e0)
    assert np.allclose(H@v0/expected_e0, v0)


def test_green_function(omega, eta, t, U):
    expected_green = twosites.get_green_function(t, U) 
    H = twosites.hamiltonian(t, U)
    green = get_green_function(H)
    assert np.allclose(green(omega+1j*eta-U/2), expected_green(omega+1j*eta))

